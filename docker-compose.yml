version: '3'
services:
    discord_slashcommands:
        image: docker.pkg.github.com/bsquidwrd/livebot/livebot:discord-slashcommands-latest
        environment:
            - LiveBot_connectionstring=${connectionstring}
            - LiveBot_token=${token}
            - LiveBot_publickey=${publickey}
            - LiveBot_testguild=${testguild}
            - LiveBot_TwitchClientId=${TwitchClientId}
            - LiveBot_TwitchClientSecret=${TwitchClientSecret}
            - LiveBot_IsDebug=${IsDebug}
            - LiveBot_datadogapikey=${datadogapikey}
            - RabbitMQ_URL=${RabbitMQ_URL}
            - RabbitMQ_Username=${RabbitMQ_Username}
            - RabbitMQ_Password=${RabbitMQ_Password}
            - LiveBot_BotsForDiscord_API=${BotsForDiscord_API}
            - LiveBot_BotsOnDiscord_API=${BotsOnDiscord_API}
            - LiveBot_DiscordBotList_API=${DiscordBotList_API}
            - LiveBot_DiscordBots_API=${DiscordBots_API}
            - LiveBot_TopGG_API=${TopGG_API}
            - Redis_connectionstring=${Redis_connectionstring}
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            restart_policy:
                condition: on-failure
                delay: 30s
                max_attempts: 3
                window: 120s
        depends_on:
            - redis
        healthcheck:
            test: ["CMD", "dotnet", "/app/LiveBot.Core.HealthCheck.dll"]
            interval: 30s
            retries: 5
            timeout: 10s
        networks:
            - default
            - backend

    redis:
        image: redis:7.0.11-alpine
        deploy:
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
            restart_policy:
                condition: on-failure
                delay: 30s
                max_attempts: 3
                window: 120s
        networks:
            - backend
        volumes:
        - redis:/data

networks:
    default:
        driver: overlay
    backend:
        driver: overlay

volumes:
    redis:
